<% title "Meet Netzke::GridPanel" %>

<p>Here's an instance of GridPanel, which by default provides for: 
  <li>multiline CRUD-operations inside the grid itself</li>
  <li>multi-record editing and adding records via a form</li>
  <li>context menu</li>
  <li>support for Rails validations</li>
  <li>pagination</li>
  <li>sorting</li>
  <li>search filters (per column)</li>
  <li>extended search (configurable, see the last widget below)</li>
  <li>automatic column type detection (e.g. "salary" is a number column)</li>
  <li>persistent on-the-fly configuration of the columns ("move", "resize" and "hide"-operations)</li>
</p>  

<p>Code (in the view):
<% coderay do %>
netzke :bosses, 
  :class_name => "GridPanel", 
  :model => 'Boss'
<% end %>
</p>
<p>Result:</p>
<%= netzke :bosses, 
  :class_name => "GridPanel", 
  :model => 'Boss' %>

<h2>Control over columns</h2>
<p>If you need more control over which columns to display and how, you can provide <tt>:columns</tt> option:</p>
<% coderay do %>
  netzke :bosses_custom_columns, 
    :class_name => "GridPanel", 
    :model => 'Boss', 
    :ext_config => {
      :rows_per_page => 20, 
      :title => "Bosses",
      :width => 400
    },
    :columns => [:id, # id should always be included and is by default hidden
      :last_name, 
      {:name => :salary, :editable => false, :label => "$", :renderer => 'usMoney'}, 
      {:name => :email, :width => 180}]
<% end %>
<p>Result:</p>
<%= netzke :bosses_custom_columns, 
  :class_name => "GridPanel", 
  :model => 'Boss', 
  :ext_config => {
    :title => "Bosses",
    :width => 400
  },
  :columns => [:id, # id should always be included and is by default hidden
    :last_name,
    {:name => :salary, :editable => false, :label => "$", :renderer => 'usMoney'}, 
    {:name => :email, :width => 180}] %>

<h2>Model-wide configuration, associations, Rails validations and "virtual" columns</h2>
<p>Here's an example that demonstrates:
  <li>how GridPanel handles one-to-many associations</li>
  <li>usage of "virtual" attributes (model's instance methods)</li>
  <li>how to specify per model which columns should be picked up by grid, and how to preconfigure them</li>
  <li>Rails' validations in action</li>

<% coderay do %>
# Model
class Clerk < ActiveRecord::Base
  belongs_to :boss

  validates_presence_of :first_name
  validates_presence_of :last_name

  # a virtual attribute
  def name
    "#{last_name}, #{first_name}"
  end

  # another virtual attribute
  def updated
    updated_at > 5.minutes.ago
  end
end

# Declare and configure attributes specifically for GridPanel
module Netzke::ModelExtensions
  class ClerkForGridPanel < Clerk
    # Virtual attribute defined in the model
    netzke_attribute :name, :renderer => "uppercase", :width => 200
    
    # Virtual attribute defined below (thus only to be shown in GridPanels)
    netzke_attribute :updated_bulb, :width => 40, :label => "<div class='bulb-off' />", :tooltip => "Recently updated"
    
    # Preconfigure a "real" attribute
    netzke_attribute :salary, :renderer => "usMoney"
    
    # Specify which columns and in which order to show
    netzke_expose_attributes :id, :name, :first_name, :last_name, :updated_bulb, :email, :salary, :boss__last_name      
    
    def updated_bulb
      bulb = updated ? "on" : "off"
      "<div class='bulb-#{bulb}' />"
    end
  end
end

# In the view:
netzke :clerks, 
  :class_name => "GridPanel", 
  :model => 'Clerk'
<% end %>
<p>Result:</p>
<%= netzke :clerks, 
  :class_name => "GridPanel",
  :model => 'Clerk' %>

<h2>Permissions</h2>
You can specify which actions are allowed for this grid
<% coderay do %>
netzke :bosses_with_permissions, 
  :class_name => "GridPanel", 
  :model => 'Boss', 
  :ext_config => {
    :prohibit_update => true,
    :prohibit_delete => true
  }
<% end %>
<p>Result:</p>
<%= netzke :bosses_with_permissions, 
  :class_name => "GridPanel", 
  :model => 'Boss', 
  :ext_config => {
    :prohibit_update => true,
    :prohibit_delete => true
  } %>
<p class="small">A word about the security: it's not only about disabling buttons. Even if the user manages to submit a prohibited operation, the server side of the widget will block the attempt.
</p>

<h2>Configuring the bars</h2>
<p>You can easily customize the bottom bar, or even move the actions to the top bar.</p>

<% coderay do %>
netzke :clerks_with_custom_bottom_bar,
    :class_name => 'GridPanel',
    :model => 'Clerk',
    :ext_config => {
      :bbar => nil,
      :tbar => [{
        :menu => [:add, :edit, :apply, :del], :text => "Edit inline", :icon => "/images/icons/table.png"
      },{
        :menu => [:add_in_form, :edit_in_form], :text => "Edit in form", :icon => "/images/icons/application_form.png"
      }]
    }
<% end %>

<p>Result:</p>
<%= netzke :clerks_with_custom_bottom_bar,
    :class_name => 'GridPanel',
    :model => 'Clerk',
    :ext_config => {
      :bbar => nil,
      :tbar => [{:menu => [:add, :edit, :apply, :del], :text => "Edit inline", :icon => "/images/icons/table.png"}, {:menu => [:add_in_form, :edit_in_form], :text => "Edit in form", :icon => "/images/icons/application_form.png"}]
    }
%>

<h2>Dynamic configuration</h2>
<p>Real power of the Netzke framework lies in its baked-in dynamic configurability. GridPanel and FormPanel from netzke-basepack provide interface to its configuration options. In real-life application these options are automatically stored per user/role, and can be quickly changed by the administrator with the help of masquerading. GridPanel below is configured to provide access to its configuration panel (click the "gear" tool on the right top of it) - use it to change different functional and representational aspects of this GridPanel instance. Besides that, the FormPanel-based forms for creating/editing records inherit the configuration mode, hence they are also configurable. And, finally, the search form is configurable as well: you can specify which criteria for search as you wish.</p>
<p>Code:</p>
<% coderay do %>
netzke :configurable_clerks, :class_name => "Wrapper", :item => {
  :class_name => "GridPanel", 
  :model => 'Clerk',
  :ext_config => {
    :mode => :config, # here we enable the configuration mode
    :title => "Configurable clerks"
  }
}
<% end %>
<p>We wrap the grid up so that after changing its configuration it can be automatically reloaded without the need to reload the page. Btw, this touches another powerful concept behind the Netzke framework: ability to easily nest widgets.</p>
<p>Result:</p>
<%= netzke :configurable_clerks, :class_name => "Wrapper", :item => {
  :class_name => "GridPanel", 
  :model => 'Clerk',
  :persistent_config => true,
  :ext_config => {
    :mode => :config, # here we enable the configuration mode
    :title => "Configurable clerks"
  }
} %>

<h2>Get the code</h2>
<p>Netzke framework consists of 2 Rails plugins/Ruby gems: netzke-core and netzke-basepack. Get them on the GitHub along with the source code for this demo: <a href = http://github.com/skozlov>http://github.com/skozlov</a></p>
<p>The news about Netzke development and more tutorials on <a href = http://blog.writelesscode.com>http://blog.writelesscode.com</a>
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="small">--- The following links alter test data (the page will be reloaded):</p>
<p class="small"><%= link_to "regenerate test data", :action => "regenerate_test_data" %></p>
<p class="small"><%= link_to "reset configs (e.g. columns configurations, permissions, etc )", :action => "reset_configs" %></p>
